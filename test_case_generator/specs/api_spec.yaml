openapi: 3.0.0
info:
  title: Sample E-Commerce API
  version: 1.0.0

paths:
  /users:
    get:
      summary: Get list of users
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
  /users/today:
    get:
      summary: Get list of users
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
    /users/projections:
    get:
      summary: Get list of users
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK

  /users/{userId}:
    get:
      summary: Get a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

  /products:
    get:
      summary: Get list of products
      parameters:
        - name: category
          in: query
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          required: false
          schema:
            type: number
        - name: maxPrice
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK

    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                category:
                  type: string
      responses:
        '201':
          description: Created

  /products/{productId}:
    get:
      summary: Get a specific product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

    put:
      summary: Update a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                category:
                  type: string
      responses:
        '200':
          description: Updated

    delete:
      summary: Delete a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  /orders:
    get:
      summary: Get list of orders
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [pending, shipped, delivered, cancelled]
      responses:
        '200':
          description: OK

    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                productIds:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Created

  /orders/{orderId}:
    get:
      summary: Get order details
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

    patch:
      summary: Update order status
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, shipped, delivered, cancelled]
      responses:
        '200':
          description: Updated

